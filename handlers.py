from aiogram import types
from aiogram.filters import Command
from aiogram.types import ParseMode
from petitions import get_petition_info
from db import save_petition, get_petitions, update_petition_info
from aiogram import Router

router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–µ—Ç–∏—Ü—ñ—è–º–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def help(message: types.Message):
    await message.answer(
        "–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n"
        "/help ‚Äî –î–æ–ø–æ–º–æ–≥–∞\n"
        "/gpetition <url> ‚Äî –î–æ–¥–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é\n"
        "/lpetition ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Ç–∏—Ü—ñ–π"
    )

# –ö–æ–º–∞–Ω–¥–∞ /gpetition ‚Äî –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ç–∏—Ü—ñ—ó
@router.message(Command("gpetition"))
async def add_petition(message: types.Message):
    url = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not url:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–µ—Ç–∏—Ü—ñ—é.")
        return
    
    existing_petitions = get_petitions()
    if any(p['url'] == url for p in existing_petitions):
        await message.answer("‚ùå –¶—é –ø–µ—Ç–∏—Ü—ñ—é –≤–∂–µ –¥–æ–¥–∞–Ω–æ.")
        return
    
    petition_info = get_petition_info(url)
    if petition_info:
        save_petition(petition_info)
        await message.answer(f"‚úÖ –ü–µ—Ç–∏—Ü—ñ—è –¥–æ–¥–∞–Ω–∞!\n\nüìë <a href='{petition_info['url']}'>{petition_info['title']}</a>\nüìä –ì–æ–ª–æ—Å—ñ–≤ –∑—ñ–±—Ä–∞–Ω–æ: <b>{petition_info['votes_collected']}</b>\n‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: <b>{petition_info['days_remaining']}</b>", parse_mode=ParseMode.HTML)
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ç–∏—Ü—ñ—é.")

# –ö–æ–º–∞–Ω–¥–∞ /lpetition ‚Äî –ø–µ—Ä–µ–≥–ª—è–¥ —Å–ø–∏—Å–∫—É –ø–µ—Ç–∏—Ü—ñ–π
@router.message(Command("lpetition"))
async def list_petitions(message: types.Message):
    update_petition_info()  # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–µ—Ä–µ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è–º
    petitions = get_petitions()

    if not petitions:
        await message.answer("üìù –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –¥–æ–¥–∞–Ω–æ—ó –ø–µ—Ç–∏—Ü—ñ—ó.")
        return
    
    result = "üìë <b>–°–ø–∏—Å–æ–∫ –ø–µ—Ç–∏—Ü—ñ–π:</b>\n\n"
    for p in petitions:
        result += f"üîπ <a href='{p['url']}'>{p['title']}</a>\nüìä –ì–æ–ª–æ—Å—ñ–≤ –∑—ñ–±—Ä–∞–Ω–æ: <b>{p['votes_collected']} –∑ 25000</b>\n‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: <b>{p['days_remaining']}</b>\n\n"
    
    await message.answer(result, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
