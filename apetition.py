import logging
import openai
import asyncio
import sqlite3
import os
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.enums import ParseMode

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –¢–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")
# API –∫–ª—é—á OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ç–∏—Ü—ñ–π
DB_FILE = "petitions.db"

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS petitions (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        title TEXT,
                        votes_collected INTEGER,
                        days_remaining INTEGER,
                        url TEXT UNIQUE)''')
    conn.commit()
    conn.close()

def save_petition(petition):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''INSERT OR IGNORE INTO petitions (title, votes_collected, days_remaining, url)
                      VALUES (?, ?, ?, ?)''',
                   (petition['title'], petition['votes_collected'], petition['days_remaining'], petition['url']))
    conn.commit()
    conn.close()

def get_petitions():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT title, votes_collected, days_remaining, url FROM petitions")
    petitions = cursor.fetchall()
    conn.close()
    return [{"title": row[0], "votes_collected": row[1], "days_remaining": row[2], "url": row[3]} for row in petitions]

def get_gpt_response(prompt: str, language: str = 'en') -> str:
    if language == 'uk':
        prompt = f"Please respond in Ukrainian: {prompt}"
    elif language == 'de':
        prompt = f"Please respond in German: {prompt}"
    else:
        prompt = f"Please respond in English: {prompt}"

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –º–æ–¥–µ–ª—å gpt-3.5-turbo –∞–±–æ gpt-4
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ê–±–æ "gpt-4" —è–∫—â–æ —Ö–æ—á–µ—Ç–µ
            messages=[{"role": "user", "content": prompt}],
            max_tokens=150,
            temperature=0.7
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        print(f"Error fetching GPT response: {e}")
        return "Sorry, there was an error processing your request."

# –ö–æ–º–∞–Ω–¥–∞ /start (–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è)
@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, —è–∫–∏–π –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –Ω—ñ–º–µ—Ü—å–∫–æ—é –º–æ–≤–∞–º–∏. "
        "–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—ó —á–µ—Ä–µ–∑ /gpetition —ñ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Ç–∏—Ü—ñ–π —á–µ—Ä–µ–∑ /lpetition."
    )

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–≤–∏–∫–ª–∏–∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ—ó –º–µ—Ä–µ–∂—ñ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)
@router.message()
async def chat(message: types.Message):
    user_message = message.text
    language = 'en'

    if any(c.isalpha() for c in user_message):
        if "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π" in user_message or "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in user_message:
            language = 'uk'
        elif "–Ω—ñ–º–µ—Ü—å–∫–∏–π" in user_message or "–Ω—ñ–º–µ—Ü—å–∫–∞" in user_message:
            language = 'de'
        else:
            language = 'en'

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT
    response = await get_gpt_response(user_message, language)
    await message.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ /gpetition –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ç–∏—Ü—ñ—ó
@router.message(Command("gpetition"))
async def add_petition(message: types.Message):
    url = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not url:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–µ—Ç–∏—Ü—ñ—é.")
        return
    
    existing_petitions = get_petitions()
    if any(p['url'] == url for p in existing_petitions):
        await message.answer("‚ùå –¶—é –ø–µ—Ç–∏—Ü—ñ—é –≤–∂–µ –¥–æ–¥–∞–Ω–æ.")
        return
    
    petition_info = get_petition_info(url)
    if petition_info:
        save_petition(petition_info)
        await message.answer(f"‚úÖ –ü–µ—Ç–∏—Ü—ñ—è –¥–æ–¥–∞–Ω–∞!\n\nüìë <a href='{petition_info['url']}'>{petition_info['title']}</a>\nüìä –ì–æ–ª–æ—Å—ñ–≤ –∑—ñ–±—Ä–∞–Ω–æ: <b>{petition_info['votes_collected']}</b>\n‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: <b>{petition_info['days_remaining']}</b>", parse_mode=ParseMode.HTML)
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ç–∏—Ü—ñ—é.")

# –ö–æ–º–∞–Ω–¥–∞ /lpetition –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–µ—Ç–∏—Ü—ñ–π
@router.message(Command("lpetition"))
async def list_petitions(message: types.Message):
    petitions = get_petitions()
    if not petitions:
        await message.answer("üìù –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –¥–æ–¥–∞–Ω–æ—ó –ø–µ—Ç–∏—Ü—ñ—ó.")
        return
    
    result = "üìë <b>–°–ø–∏—Å–æ–∫ –ø–µ—Ç–∏—Ü—ñ–π:</b>\n\n"
    for p in petitions:
        result += f"üîπ <a href='{p['url']}'>{p['title']}</a>\nüìä –ì–æ–ª–æ—Å—ñ–≤ –∑—ñ–±—Ä–∞–Ω–æ: <b>{p['votes_collected']} –∑ 25000</b>\n‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: <b>{p['days_remaining']}</b>\n\n"
    
    await message.answer(result, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–µ—Ç–∏—Ü—ñ—é
def get_petition_info(url: str):
    response = requests.get(url)
    if response.status_code != 200:
        return None
    
    soup = BeautifulSoup(response.text, 'html.parser')
    title = soup.select_one("h1").text.strip()
    votes_collected = int(soup.select_one(".petition_votes_txt span").text.strip().replace(" ", ""))
    days_remaining_text = soup.select_one(".votes_progress_label").text.strip()
    days_remaining = int(''.join(filter(str.isdigit, days_remaining_text)))
    
    return {"title": title, "votes_collected": votes_collected, "days_remaining": days_remaining, "url": url}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    dp.include_router(router)
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
